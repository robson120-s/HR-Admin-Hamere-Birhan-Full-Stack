generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activitylog {
  id                                      Int              @id @default(autoincrement())
  type                                    activitylog_type
  message                                 String
  actorId                                 Int
  targetId                                Int?
  departmentId                            Int
  createdAt                               DateTime         @default(now())
  employee_activitylog_actorIdToemployee  employee         @relation("activitylog_actorIdToemployee", fields: [actorId], references: [id], onDelete: NoAction, map: "ActivityLog_actorId_fkey")
  employee_activitylog_targetIdToemployee employee?        @relation("activitylog_targetIdToemployee", fields: [targetId], references: [id], map: "ActivityLog_targetId_fkey")

  @@index([actorId], map: "ActivityLog_actorId_fkey")
  @@index([departmentId, createdAt], map: "ActivityLog_departmentId_createdAt_idx")
  @@index([targetId], map: "ActivityLog_targetId_fkey")
}

model agreementstatus {
  id       Int        @id @default(autoincrement())
  status   String     @unique(map: "AgreementStatus_status_key")
  employee employee[]
}

model attendancelog {
  id                Int                  @id @default(autoincrement())
  employeeId        Int
  date              DateTime
  sessionId         Int
  actualClockIn     DateTime?
  actualClockOut    DateTime?
  status            attendancelog_status
  createdAt         DateTime             @default(now())
  employee          employee             @relation(fields: [employeeId], references: [id], onDelete: Cascade, map: "AttendanceLog_employeeId_fkey")
  sessiondefinition sessiondefinition    @relation(fields: [sessionId], references: [id], onDelete: Cascade, map: "AttendanceLog_sessionId_fkey")

  @@unique([employeeId, date, sessionId], map: "AttendanceLog_employeeId_date_sessionId_key")
  @@index([sessionId], map: "AttendanceLog_sessionId_fkey")
}

model attendancesummary {
  id               Int                      @id @default(autoincrement())
  employeeId       Int
  date             DateTime
  status           attendancesummary_status
  lateArrival      Boolean                  @default(false)
  earlyDeparture   Boolean                  @default(false)
  unplannedAbsence Boolean                  @default(false)
  totalWorkHours   Decimal?
  remarks          String?
  departmentId     Int?
  department       department?              @relation(fields: [departmentId], references: [id], map: "AttendanceSummary_departmentId_fkey")
  employee         employee                 @relation(fields: [employeeId], references: [id], onDelete: Cascade, map: "AttendanceSummary_employeeId_fkey")

  @@unique([employeeId, date], map: "AttendanceSummary_employeeId_date_key")
  @@index([departmentId], map: "AttendanceSummary_departmentId_fkey")
}

model complaint {
  id          Int              @id @default(autoincrement())
  employeeId  Int
  subject     String
  description String
  status      complaint_status @default(open)
  response    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime
  employee    employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade, map: "Complaint_employeeId_fkey")

  @@index([employeeId], map: "Complaint_employeeId_fkey")
}

model department {
  id                                            Int                 @id @default(autoincrement())
  name                                          String              @unique(map: "Department_name_key")
  description                                   String?
  createdAt                                     DateTime            @default(now())
  updatedAt                                     DateTime
  parentId                                      Int?
  payrollPolicyId                               Int?
  attendancesummary                             attendancesummary[]
  department                                    department?         @relation("departmentTodepartment", fields: [parentId], references: [id], map: "Department_parentId_fkey")
  other_department                              department[]        @relation("departmentTodepartment")
  payrollpolicy                                 payrollpolicy?      @relation(fields: [payrollPolicyId], references: [id], map: "Department_payrollPolicyId_fkey")
  employee_employee_departmentIdTodepartment    employee[]          @relation("employee_departmentIdTodepartment")
  employee_employee_subDepartmentIdTodepartment employee[]          @relation("employee_subDepartmentIdTodepartment")

  @@index([parentId], map: "Department_parentId_fkey")
  @@index([payrollPolicyId], map: "Department_payrollPolicyId_fkey")
}

model employee {
  id                                              Int                 @id @default(autoincrement())
  userId                                          Int?                @unique(map: "Employee_userId_key")
  firstName                                       String
  lastName                                        String
  baptismalName                                   String?
  dateOfBirth                                     DateTime?
  sex                                             employee_sex
  nationality                                     String?
  maritalStatusId                                 Int?
  departmentId                                    Int?
  positionId                                      Int?
  employmentTypeId                                Int?
  employmentDate                                  DateTime?
  jobStatusId                                     Int?
  phone                                           String?
  address                                         String?
  subCity                                         String?
  emergencyContactName                            String?
  emergencyContactPhone                           String?
  repentanceFatherName                            String?
  repentanceFatherChurch                          String?
  repentanceFatherPhone                           String?
  academicQualification                           String?
  educationalInstitution                          String?
  salary                                          Decimal             @default(0.0)
  bonusSalary                                     Decimal             @default(0.0)
  accountNumber                                   String?
  agreementStatusId                               Int?
  photo                                           String?
  deletedAt                                       DateTime?
  createdAt                                       DateTime            @default(now())
  updatedAt                                       DateTime
  subDepartmentId                                 Int?

  activitylog_activitylog_actorIdToemployee       activitylog[]       @relation("activitylog_actorIdToemployee")
  activitylog_activitylog_targetIdToemployee      activitylog[]       @relation("activitylog_targetIdToemployee")
  attendancelog                                   attendancelog[]
  attendancesummary                               attendancesummary[]
  complaint                                       complaint[]
  agreementstatus                                 agreementstatus?    @relation(fields: [agreementStatusId], references: [id], map: "Employee_agreementStatusId_fkey")
  department_employee_departmentIdTodepartment    department?         @relation("employee_departmentIdTodepartment", fields: [departmentId], references: [id], map: "Employee_departmentId_fkey")
  employmenttype                                  employmenttype?     @relation(fields: [employmentTypeId], references: [id], map: "Employee_employmentTypeId_fkey")
  jobstatus                                       jobstatus?          @relation(fields: [jobStatusId], references: [id], map: "Employee_jobStatusId_fkey")
  maritalstatus                                   maritalstatus?      @relation(fields: [maritalStatusId], references: [id], map: "Employee_maritalStatusId_fkey")
  position                                        position?           @relation(fields: [positionId], references: [id], map: "Employee_positionId_fkey")
  department_employee_subDepartmentIdTodepartment department?         @relation("employee_subDepartmentIdTodepartment", fields: [subDepartmentId], references: [id], map: "Employee_subDepartmentId_fkey")
  user                                            user?               @relation(fields: [userId], references: [id], map: "Employee_userId_fkey")
  employeeshift                                   employeeshift[]
  leave                                           leave[]
  meeting                                         meeting[]
  overtimelog                                     overtimelog[]
  performancereview                               performancereview[]
  salaryRecords                                   salary[]            @relation("EmployeeToSalary")
  termination                                     termination[]

  @@index([agreementStatusId], map: "Employee_agreementStatusId_fkey")
  @@index([departmentId], map: "Employee_departmentId_fkey")
  @@index([employmentTypeId], map: "Employee_employmentTypeId_fkey")
  @@index([jobStatusId], map: "Employee_jobStatusId_fkey")
  @@index([maritalStatusId], map: "Employee_maritalStatusId_fkey")
  @@index([positionId], map: "Employee_positionId_fkey")
  @@index([subDepartmentId], map: "Employee_subDepartmentId_fkey")
}


model employeeshift {
  id            Int       @id @default(autoincrement())
  employeeId    Int
  shiftId       Int
  effectiveFrom DateTime
  effectiveTo   DateTime?
  employee      employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, map: "EmployeeShift_employeeId_fkey")
  shift         shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade, map: "EmployeeShift_shiftId_fkey")

  @@index([employeeId], map: "EmployeeShift_employeeId_fkey")
  @@index([shiftId], map: "EmployeeShift_shiftId_fkey")
}

model employmenttype {
  id       Int        @id @default(autoincrement())
  type     String     @unique(map: "EmploymentType_type_key")
  employee employee[]
}

model holiday {
  id          Int      @id @default(autoincrement())
  name        String
  date        DateTime @unique(map: "Holiday_date_key")
  isPublic    Boolean  @default(true)
  description String?
}

model interview {
  id            Int              @id @default(autoincrement())
  candidateName String
  position      String?
  interviewDate DateTime?
  result        interview_result @default(pending)
  comments      String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime
}

model jobstatus {
  id       Int        @id @default(autoincrement())
  status   String     @unique(map: "JobStatus_status_key")
  employee employee[]
}

model leave {
  id          Int             @id @default(autoincrement())
  employeeId  Int
  leaveType   leave_leaveType
  startDate   DateTime
  endDate     DateTime
  status      leave_status    @default(pending)
  reason      String?
  approvedBy  Int?
  requestedAt DateTime        @default(now())
  updatedAt   DateTime
  user        user?           @relation(fields: [approvedBy], references: [id], map: "Leave_approvedBy_fkey")
  employee    employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade, map: "Leave_employeeId_fkey")

  @@index([approvedBy], map: "Leave_approvedBy_fkey")
  @@index([employeeId], map: "Leave_employeeId_fkey")
}

model maritalstatus {
  id       Int        @id @default(autoincrement())
  status   String     @unique(map: "MaritalStatus_status_key")
  employee employee[]
}

model meeting {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  time        String
  creatorId   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    employee? @relation(fields: [creatorId], references: [id], map: "Meeting_creatorId_fkey")

  @@index([creatorId], map: "Meeting_creatorId_fkey")
}

model overtimelog {
  id                 Int                            @id @default(autoincrement())
  employeeId         Int
  date               DateTime
  hours              Decimal?
  reason             String?
  approvedBy         Int?
  approvalStatus     overtimelog_approvalStatus     @default(pending)
  compensationMethod overtimelog_compensationMethod @default(cash)
  endTime            DateTime?
  startTime          DateTime?
  overtimeType       overtimelog_overtimeType       @default(WEEKDAY)
  createdAt          DateTime                       @default(now())
  updatedAt          DateTime                       @default(now())
  user               user?                          @relation(fields: [approvedBy], references: [id], map: "OvertimeLog_approvedBy_fkey")
  employee           employee                       @relation(fields: [employeeId], references: [id], onDelete: Cascade, map: "OvertimeLog_employeeId_fkey")

  @@index([approvedBy], map: "OvertimeLog_approvedBy_fkey")
  @@index([employeeId], map: "OvertimeLog_employeeId_fkey")
}

model payrollpolicy {
  id                    Int          @id @default(autoincrement())
  name                  String       @unique(map: "PayrollPolicy_name_key")
  isDefault             Boolean      @default(false)
  otMultiplierWeekday1  Decimal      @default(1.500000000000000000000000000000)
  otMultiplierWeekday2  Decimal      @default(1.750000000000000000000000000000)
  otMultiplierSunday    Decimal      @default(2.000000000000000000000000000000)
  otMultiplierHoliday   Decimal      @default(2.500000000000000000000000000000)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime
  otMultiplierSleepover Decimal      @default(2.200000000000000000000000000000)
  department            department[]
}

model performancereview {
  id           Int      @id @default(autoincrement())
  employeeId   Int
  reviewDate   DateTime
  reviewerName String?
  score        Int?
  comments     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  employee     employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, map: "PerformanceReview_employeeId_fkey")

  @@index([employeeId], map: "PerformanceReview_employeeId_fkey")
}

model position {
  id          Int        @id @default(autoincrement())
  name        String     @unique(map: "Position_name_key")
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  employee    employee[]
}

model role {
  id          Int        @id @default(autoincrement())
  name        String     @unique(map: "Role_name_key")
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  userrole    userrole[]
}

model salary {
  id            Int           @id @default(autoincrement())
  employeeId    Int
  salaryMonth   DateTime
  amount        Decimal
  status        salary_status @default(pending)
  overtimeHours Decimal       @default(0.000000000000000000000000000000)
  overtimePay   Decimal       @default(0.000000000000000000000000000000)
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  baseSalary    Decimal       @default(0.000000000000000000000000000000)
  deductions    Decimal       @default(0.000000000000000000000000000000)
 employee      employee      @relation("EmployeeToSalary", fields: [employeeId], references: [id], onDelete: Cascade, map: "Salary_employeeId_fkey")
  @@unique([employeeId, salaryMonth], map: "Salary_employeeId_salaryMonth_key")
}

model sessiondefinition {
  id               Int             @id @default(autoincrement())
  sessionNumber    Int             @unique(map: "SessionDefinition_sessionNumber_key")
  expectedClockIn  DateTime
  expectedClockOut DateTime
  attendancelog    attendancelog[]
}

model shift {
  id            Int             @id @default(autoincrement())
  name          String
  startTime     DateTime
  endTime       DateTime
  isFlexible    Boolean         @default(false)
  description   String?
  employeeshift employeeshift[]
}

model termination {
  id              Int                        @id @default(autoincrement())
  employeeId      Int
  terminationDate DateTime
  reason          String?
  status          termination_status
  remarks         String?
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime
  workflowStatus  termination_workflowStatus @default(pending_approval)
  employee        employee                   @relation(fields: [employeeId], references: [id], onDelete: Cascade, map: "Termination_employeeId_fkey")

  @@index([employeeId], map: "Termination_employeeId_fkey")
}

model user {
  id                Int           @id @default(autoincrement())
  username          String        @unique(map: "User_username_key")
  email             String        @unique(map: "User_email_key")
  password          String
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  notifyOnComplaint Boolean       @default(true)
  employee          employee?
  leave             leave[]
  overtimelog       overtimelog[]
  userrole          userrole[]
}

model userrole {
  userId Int
  roleId Int
  role   role @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "UserRole_roleId_fkey")
  user   user @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserRole_userId_fkey")

  @@id([userId, roleId])
  @@index([roleId], map: "UserRole_roleId_fkey")
}

enum activitylog_type {
  ATTENDANCE_MARKED
  REVIEW_SUBMITTED
  OVERTIME_REQUESTED
  LEAVE_REQUESTED
  COMPLAINT_SUBMITTED
  LEAVE_ACTIONED
  OVERTIME_ACTIONED
}

enum leave_leaveType {
  annual
  sick
  unpaid
  maternity
  other
}

enum attendancesummary_status {
  present
  absent
  half_day
  on_leave
  permission
  holiday
  weekend
}

enum complaint_status {
  open
  in_review
  resolved
  rejected
}

enum interview_result {
  pending
  selected
  rejected
}

enum salary_status {
  paid
  unpaid
  pending
}

enum termination_status {
  voluntary
  involuntary
  retired
}

enum leave_status {
  pending
  approved
  rejected
}

enum attendancelog_status {
  present
  late
  absent
  permission
}

enum employee_sex {
  male
  female
}

enum overtimelog_approvalStatus {
  pending
  approved
  rejected
}

enum overtimelog_compensationMethod {
  cash
  time_off
}

enum termination_workflowStatus {
  pending_approval
  processing
  finalized
}

enum overtimelog_overtimeType {
  WEEKDAY
  SUNDAY
  HOLIDAY
}
