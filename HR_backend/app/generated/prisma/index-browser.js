
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ActivitylogScalarFieldEnum = {
  id: 'id',
  type: 'type',
  message: 'message',
  actorId: 'actorId',
  targetId: 'targetId',
  departmentId: 'departmentId',
  createdAt: 'createdAt'
};

exports.Prisma.AgreementstatusScalarFieldEnum = {
  id: 'id',
  status: 'status'
};

exports.Prisma.AttendancelogScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  date: 'date',
  sessionId: 'sessionId',
  actualClockIn: 'actualClockIn',
  actualClockOut: 'actualClockOut',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AttendancesummaryScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  date: 'date',
  status: 'status',
  lateArrival: 'lateArrival',
  earlyDeparture: 'earlyDeparture',
  unplannedAbsence: 'unplannedAbsence',
  totalWorkHours: 'totalWorkHours',
  remarks: 'remarks',
  departmentId: 'departmentId'
};

exports.Prisma.ComplaintScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  subject: 'subject',
  description: 'description',
  status: 'status',
  response: 'response',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parentId: 'parentId',
  payrollPolicyId: 'payrollPolicyId'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  baptismalName: 'baptismalName',
  dateOfBirth: 'dateOfBirth',
  sex: 'sex',
  nationality: 'nationality',
  maritalStatusId: 'maritalStatusId',
  departmentId: 'departmentId',
  positionId: 'positionId',
  employmentTypeId: 'employmentTypeId',
  employmentDate: 'employmentDate',
  jobStatusId: 'jobStatusId',
  phone: 'phone',
  address: 'address',
  subCity: 'subCity',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  repentanceFatherName: 'repentanceFatherName',
  repentanceFatherChurch: 'repentanceFatherChurch',
  repentanceFatherPhone: 'repentanceFatherPhone',
  academicQualification: 'academicQualification',
  educationalInstitution: 'educationalInstitution',
  salary: 'salary',
  bonusSalary: 'bonusSalary',
  accountNumber: 'accountNumber',
  agreementStatusId: 'agreementStatusId',
  photo: 'photo',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  subDepartmentId: 'subDepartmentId'
};

exports.Prisma.EmployeeshiftScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  shiftId: 'shiftId',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo'
};

exports.Prisma.EmploymenttypeScalarFieldEnum = {
  id: 'id',
  type: 'type'
};

exports.Prisma.HolidayScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  isPublic: 'isPublic',
  description: 'description'
};

exports.Prisma.InterviewScalarFieldEnum = {
  id: 'id',
  candidateName: 'candidateName',
  position: 'position',
  interviewDate: 'interviewDate',
  result: 'result',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobstatusScalarFieldEnum = {
  id: 'id',
  status: 'status'
};

exports.Prisma.LeaveScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  leaveType: 'leaveType',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  reason: 'reason',
  approvedBy: 'approvedBy',
  requestedAt: 'requestedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaritalstatusScalarFieldEnum = {
  id: 'id',
  status: 'status'
};

exports.Prisma.MeetingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  date: 'date',
  time: 'time',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OvertimelogScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  date: 'date',
  hours: 'hours',
  reason: 'reason',
  approvedBy: 'approvedBy',
  approvalStatus: 'approvalStatus',
  compensationMethod: 'compensationMethod',
  endTime: 'endTime',
  startTime: 'startTime',
  overtimeType: 'overtimeType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayrollpolicyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isDefault: 'isDefault',
  otMultiplierWeekday1: 'otMultiplierWeekday1',
  otMultiplierWeekday2: 'otMultiplierWeekday2',
  otMultiplierSunday: 'otMultiplierSunday',
  otMultiplierHoliday: 'otMultiplierHoliday',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  otMultiplierSleepover: 'otMultiplierSleepover'
};

exports.Prisma.PerformancereviewScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  reviewDate: 'reviewDate',
  reviewerName: 'reviewerName',
  score: 'score',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SalaryScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  salaryMonth: 'salaryMonth',
  amount: 'amount',
  status: 'status',
  overtimeHours: 'overtimeHours',
  overtimePay: 'overtimePay',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  baseSalary: 'baseSalary',
  deductions: 'deductions'
};

exports.Prisma.SessiondefinitionScalarFieldEnum = {
  id: 'id',
  sessionNumber: 'sessionNumber',
  expectedClockIn: 'expectedClockIn',
  expectedClockOut: 'expectedClockOut'
};

exports.Prisma.ShiftScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startTime: 'startTime',
  endTime: 'endTime',
  isFlexible: 'isFlexible',
  description: 'description'
};

exports.Prisma.TerminationScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  terminationDate: 'terminationDate',
  reason: 'reason',
  status: 'status',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  workflowStatus: 'workflowStatus'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  notifyOnComplaint: 'notifyOnComplaint'
};

exports.Prisma.UserroleScalarFieldEnum = {
  userId: 'userId',
  roleId: 'roleId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.activitylogOrderByRelevanceFieldEnum = {
  message: 'message'
};

exports.Prisma.agreementstatusOrderByRelevanceFieldEnum = {
  status: 'status'
};

exports.Prisma.attendancesummaryOrderByRelevanceFieldEnum = {
  remarks: 'remarks'
};

exports.Prisma.complaintOrderByRelevanceFieldEnum = {
  subject: 'subject',
  description: 'description',
  response: 'response'
};

exports.Prisma.departmentOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.employeeOrderByRelevanceFieldEnum = {
  firstName: 'firstName',
  lastName: 'lastName',
  baptismalName: 'baptismalName',
  nationality: 'nationality',
  phone: 'phone',
  address: 'address',
  subCity: 'subCity',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  repentanceFatherName: 'repentanceFatherName',
  repentanceFatherChurch: 'repentanceFatherChurch',
  repentanceFatherPhone: 'repentanceFatherPhone',
  academicQualification: 'academicQualification',
  educationalInstitution: 'educationalInstitution',
  accountNumber: 'accountNumber',
  photo: 'photo'
};

exports.Prisma.employmenttypeOrderByRelevanceFieldEnum = {
  type: 'type'
};

exports.Prisma.holidayOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.interviewOrderByRelevanceFieldEnum = {
  candidateName: 'candidateName',
  position: 'position',
  comments: 'comments'
};

exports.Prisma.jobstatusOrderByRelevanceFieldEnum = {
  status: 'status'
};

exports.Prisma.leaveOrderByRelevanceFieldEnum = {
  reason: 'reason'
};

exports.Prisma.maritalstatusOrderByRelevanceFieldEnum = {
  status: 'status'
};

exports.Prisma.meetingOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  time: 'time'
};

exports.Prisma.overtimelogOrderByRelevanceFieldEnum = {
  reason: 'reason'
};

exports.Prisma.payrollpolicyOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.performancereviewOrderByRelevanceFieldEnum = {
  reviewerName: 'reviewerName',
  comments: 'comments'
};

exports.Prisma.positionOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.roleOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.shiftOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.terminationOrderByRelevanceFieldEnum = {
  reason: 'reason',
  remarks: 'remarks'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  username: 'username',
  email: 'email',
  password: 'password'
};
exports.activitylog_type = exports.$Enums.activitylog_type = {
  ATTENDANCE_MARKED: 'ATTENDANCE_MARKED',
  REVIEW_SUBMITTED: 'REVIEW_SUBMITTED',
  OVERTIME_REQUESTED: 'OVERTIME_REQUESTED',
  LEAVE_REQUESTED: 'LEAVE_REQUESTED',
  COMPLAINT_SUBMITTED: 'COMPLAINT_SUBMITTED',
  LEAVE_ACTIONED: 'LEAVE_ACTIONED',
  OVERTIME_ACTIONED: 'OVERTIME_ACTIONED'
};

exports.attendancelog_status = exports.$Enums.attendancelog_status = {
  present: 'present',
  late: 'late',
  absent: 'absent',
  permission: 'permission'
};

exports.attendancesummary_status = exports.$Enums.attendancesummary_status = {
  present: 'present',
  absent: 'absent',
  half_day: 'half_day',
  on_leave: 'on_leave',
  permission: 'permission',
  holiday: 'holiday',
  weekend: 'weekend'
};

exports.complaint_status = exports.$Enums.complaint_status = {
  open: 'open',
  in_review: 'in_review',
  resolved: 'resolved',
  rejected: 'rejected'
};

exports.employee_sex = exports.$Enums.employee_sex = {
  male: 'male',
  female: 'female'
};

exports.interview_result = exports.$Enums.interview_result = {
  pending: 'pending',
  selected: 'selected',
  rejected: 'rejected'
};

exports.leave_leaveType = exports.$Enums.leave_leaveType = {
  annual: 'annual',
  sick: 'sick',
  unpaid: 'unpaid',
  maternity: 'maternity',
  other: 'other'
};

exports.leave_status = exports.$Enums.leave_status = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.overtimelog_approvalStatus = exports.$Enums.overtimelog_approvalStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.overtimelog_compensationMethod = exports.$Enums.overtimelog_compensationMethod = {
  cash: 'cash',
  time_off: 'time_off'
};

exports.overtimelog_overtimeType = exports.$Enums.overtimelog_overtimeType = {
  WEEKDAY: 'WEEKDAY',
  SUNDAY: 'SUNDAY',
  HOLIDAY: 'HOLIDAY'
};

exports.salary_status = exports.$Enums.salary_status = {
  paid: 'paid',
  unpaid: 'unpaid',
  pending: 'pending'
};

exports.termination_status = exports.$Enums.termination_status = {
  voluntary: 'voluntary',
  involuntary: 'involuntary',
  retired: 'retired'
};

exports.termination_workflowStatus = exports.$Enums.termination_workflowStatus = {
  pending_approval: 'pending_approval',
  processing: 'processing',
  finalized: 'finalized'
};

exports.Prisma.ModelName = {
  activitylog: 'activitylog',
  agreementstatus: 'agreementstatus',
  attendancelog: 'attendancelog',
  attendancesummary: 'attendancesummary',
  complaint: 'complaint',
  department: 'department',
  employee: 'employee',
  employeeshift: 'employeeshift',
  employmenttype: 'employmenttype',
  holiday: 'holiday',
  interview: 'interview',
  jobstatus: 'jobstatus',
  leave: 'leave',
  maritalstatus: 'maritalstatus',
  meeting: 'meeting',
  overtimelog: 'overtimelog',
  payrollpolicy: 'payrollpolicy',
  performancereview: 'performancereview',
  position: 'position',
  role: 'role',
  salary: 'salary',
  sessiondefinition: 'sessiondefinition',
  shift: 'shift',
  termination: 'termination',
  user: 'user',
  userrole: 'userrole'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
